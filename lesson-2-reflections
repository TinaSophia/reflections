1. What happens when you initialize a repository? Why do you need to do it?
When I initialize a repository the .git file is created. This file will hold all
meta data associated to the history of the repository. Command to use: git init

2. How is the staging area different from the working directory and the repository?
What value do you think it offers?
Files are no longer available for changes once they are added to the staging area.
The staging area is a place to hold files until I am ready to commit them.
The staging area only holds files to be committed.
The working directory includes all files associated to the project tracked and
non-tracked. Here I am actively making changes.
The repository holds the history of all commits.

3.How can you use the staging area to make sure you have one commit per logical
change?
I only move files that contain code for the one logical change to the staging area.
Changes to the files located in the working directory will not be committed.

4. What are some situations when branches would be helpful in keeping your
history organized? How would branches help?
A branch can hold features of the program that are experimental. I am not sure
if they should become part of the program. Testing different ideas.
The features can be worked on separately without cluttering the main line of
development. Branches help separate and organize the development of a project.

5. How do the diagrams help you visualize the branch structure?
A diagram helps locate all branches and their positions with respect to each other.
I can easily see how the branches are connected and what the parent structure
looks like.

6. What is the result of merging two branches together? Why do we represent it
 in the diagram the way we do?
 The merge commit combines the features of both branches and only one line of
 development remains. The diagram shows a split and two different lines of code
 development at the parent where the branch is created and the lines come together
 again at the merge commit. 
